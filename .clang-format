# The extra indent or outdent of access modifiers (e.g. public:)
AccessModifierOffset: 0

# This applies to round brackets (parentheses), angle brackets and square brackets.
AlignAfterOpenBracket: Align

# This will align the assignment operators of consecutive lines.
AlignConsecutiveAssignments: true

# This will align the declaration names of consecutive lines.
AlignConsecutiveDeclarations: true

# True: aligns escaped newlines as far left as possible.
# False: puts them into the right-most column.
AlignEscapedNewlinesLeft: true

# True: horizontally align operands of binary and ternary expressions.
AlignOperands: true

# True: aligns trailing comments.
AlignTrailingComments: true

# Allow putting all parameters of a function declaration onto the next line.
# Even if BinPackParameters is false.
AllowAllParametersOfDeclarationOnNextLine: false

# Allows contracting simple braced statements to a single line.
AllowShortBlocksOnASingleLine: true

# True: short case labels will be contracted to a single line.
AllowShortCaseLabelsOnASingleLine: true

# Dependent on the value, int f() { return 0; } can be put on a single line.
AllowShortFunctionsOnASingleLine: All

# True: if(a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: true

# True: while(true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: true

# The function definition return type breaking style to use. (Deprecated)
# AlwaysBreakAfterDefinitionReturnType: All

# The function declaration return type breaking style to use.
AlwaysBreakAfterReturnType: All

# True: always break before multiline string literals.
AlwaysBreakBeforeMultilineStrings: false

# True: always break after the template<...> of a template declaration.
AlwaysBreakTemplateDeclarations: true

# False: a function declaration’s or function definition’s parameters will either:
	# All be on the same line.
	# Or will have one line each.
BinPackParameters: true

# Control of individual brace wrapping cases. (If BreakBeforeBraces is set to BS_Custom)
# BraceWrapping:

# The way to wrap binary operators.
BreakBeforeBinaryOperators: All

# The brace breaking style to use.
BreakBeforeBraces: Attach

# True: ternary operators will be placed after line breaks.
BreakBeforeTernaryOperators: false

# Always break constructor initializers before commas and align the commas with the colon.
BreakConstructorInitializersBeforeComma: false

# The column limit. (0 means no limit)
ColumnLimit: 90

# A regular expression that describes comments with special meaning.
# Which should not be split into lines or otherwise changed.
CommentPragmas: ''

# If constructor initializers don’t fit on a line, put each initializer on its own line.
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# The number of characters to use for indentation of constructor initializer lists.
ConstructorInitializerIndentWidth: 1

# Indent width for line continuations.
ContinuationIndentWidth: 1

# True: format braced lists as best suited for C++11 braced lists.
Cpp11BracedListStyle: true

# True: analyze the formatted file for the most common alignment (& and \*).
# PointerAlignment is then used only as fallback.
DerivePointerAlignment: true

DerivePointerBinding: false

# Indent case labels one level from the switch statement.
IndentCaseLabels: true

# IndentFunctionDeclarationAfterType: false

# The number of columns to use for indentation.
IndentWidth: 4

# Indent if a function definition or declaration is wrapped after the type.
IndentWrappedFunctionNames: false

# True: empty lines at the start of blocks are kept.
KeepEmptyLinesAtTheStartOfBlocks: false

# Language, this format style is targeted at.
Language: Cpp

# A regular expression matching macros that start a block.
MacroBlockBegin: ''

# A regular expression matching macros that end a block.
MacroBlockEnd: ''

# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1

# The indentation used for namespaces.
NamespaceIndentation: Inner

# The penalty for breaking a function call after call(.
PenaltyBreakBeforeFirstCallParameter: 1

# The penalty for each line break introduced inside a comment.
PenaltyBreakComment: 300

# The penalty for breaking before the first <<.
PenaltyBreakFirstLessLess: 120

# The penalty for each line break introduced inside a string literal.
PenaltyBreakString: 1000

# The penalty for each character outside of the column limit.
PenaltyExcessCharacter: 1000000

# Penalty for putting the return type of a function onto its own line.
PenaltyReturnTypeOnItsOwnLine: 200

# Pointer and reference alignment style.
PointerAlignment: Right

# PointerBindsToType: false

# True: clang-format will attempt to re-flow comments.
ReflowComments: true

# True: clang-format will sort #includes.
SortIncludes: true

# False: spaces will be removed before assignment operators.
SpaceBeforeAssignmentOperators: true

# Defines in which cases to put a space before opening parentheses.
SpaceBeforeParens: Never

# True: spaces may be inserted into ().
SpaceInEmptyParentheses: false

# The number of spaces before trailing line comments (// - comments).
SpacesBeforeTrailingComments: 1

# True: spaces will be inserted after < and before > in template argument lists.
SpacesInAngles: false

# True: spaces may be inserted into C style casts.
SpacesInCStyleCastParentheses: false

# True: spaces are inserted inside container literals
SpacesInContainerLiterals: false

# True: spaces will be inserted after ( and before ).
SpacesInParentheses: false

# True: spaces will be inserted after [ and before ].
SpacesInSquareBrackets: false

# Format compatible with standard (e.g. use A<A<int> > instead of A<A<int>> for LS_Cpp03)
Standard: Auto

# The number of columns used for tab stops.
TabWidth: 4

# The way to use tab characters in the resulting file.
UseTab: Always